AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  tiny-url

  Cfn Template for tiny-url frontend

Parameters:
  Stage:
    Type: String
    Description: Deploying Environment (e.g. stage, prod)
    Default: dev

Resources:
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Tiny-url website OA'

  CloudfrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: 'Cloudfront distribution for tinyurl website'
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt FrontendS3TinyUrlBucket.RegionalDomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
  FrontendS3TinyUrlBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      VersioningConfiguration:
        Status: Enabled
  FrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3TinyUrlBucket # a reference to the bucket defined above
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: 'Allow'
            Resource:
              - !Sub 'arn:aws:s3:::${FrontendS3TinyUrlBucket}/*'
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.2.0

  # this function is used only during deployment,
  # we use the web site assets as the source of the function
  # tricking cloudformation to pack up the web site files
  # using the standard cloudformation package process
  DeploymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        # the layer contains the deployment code
        # so the function "source" can just contain the web assets
        - !GetAtt DeploymentLayer.Outputs.Arn

      # point to directory with the assets so cloudformation can
      # package and upload them
      CodeUri: ../../dist/

      # really important: this will ensure that any change in
      # the bundled files gets deployed again. we're abusing
      # the custom resource pipeline here, so this will be used
      # to change parameters of the resource and re-trigger it
      AutoPublishAlias: live

      # the following two lines are required to make the layer work
      Runtime: python3.6
      Handler: deployer.resource_handler

      # set the timeout to something reasonable depending on
      # how long it takes to upload your assets to S3
      Timeout: 600

      # give the function access to the bucket where it
      # will upload the assets
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref FrontendS3TinyUrlBucket

  # This is a custom resource that
  # will trigger the function during deployment
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      # the following two lines are required to
      # ensure that cloudformation will trigger the
      # resource every time you change the bundled files
      ServiceToken: !GetAtt DeploymentFunction.Arn
      Version: !Ref 'DeploymentFunction.Version'

      # tell the deployer where to upload the files
      TargetBucket: !Ref FrontendS3TinyUrlBucket

      Substitutions:
        # scope string substitutions to .js and .js.map files in the production built website
        FilePattern: 'js/*.js*'
        Values:
          # replaces any occurrence of ${ValueKey} in the javascript code with the following values
          BACKEND_ENDPOINT: !Sub '{{resolve:ssm:/applications/tinyurl/${Stage}/apigateway/ApplicationsApi/Endpoint:1}}'

      # Choose the ACL and caching policies
      # eg, for directly accessible web site
      # use public-read and 10 minutes caching
      Acl: 'public-read'
      CacheControlMaxAge: 600

  # Storing resources names to SSM
  FrontendS3TinyUrlBucketName:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub '/applications/tinyurl/${Stage}/s3/FrontendS3TinyUrlBucket/Name'
      Type: 'String'
      Value: !Ref FrontendS3TinyUrlBucket
      Description: 'FrontendS3TinyUrlBucket bucket name'
  WebsiteUrl:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub '/applications/tinyurl/${Stage}/s3/FrontendS3TinyUrlBucket/WebsiteURL'
      Type: 'String'
      Value: !GetAtt FrontendS3TinyUrlBucket.WebsiteURL
      Description: 'Frontend S3 Bucket Website URL'
  CloudfrontDomain:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub '/applications/tinyurl/${Stage}/cloudfront/CloudfrontDistribution/DomainName'
      Type: 'String'
      Value: !GetAtt CloudfrontDistribution.DomainName
      Description: 'Frontend Cloudfront Domain'
Outputs:
  Url:
    Description: The static website URL for the service.
    Value: !GetAtt FrontendS3TinyUrlBucket.WebsiteURL
